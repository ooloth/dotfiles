name: Test Dotfiles Setup Scripts

on:
  # Run on pushes to main branch and feature branches
  push:
    branches: [ main, 'feature/**', 'fix/**' ]
    paths:
      - 'setup.zsh'
      - 'setup.bash'
      - 'bin/**'
      - 'lib/**'
      - 'core/**'
      - 'features/**'
      - 'test/**'
      - 'macos/Brewfile'
      - 'config/**'
      - '.github/workflows/test-dotfiles.yml'
  
  # Run on pull requests to main
  pull_request:
    branches: [ main ]
    paths:
      - 'setup.zsh'
      - 'setup.bash'
      - 'bin/**'
      - 'lib/**'
      - 'core/**'
      - 'features/**'
      - 'test/**'
      - 'macos/Brewfile'
      - 'config/**'
      - '.github/workflows/test-dotfiles.yml'
  
  # Allow manual triggering for debugging
  workflow_dispatch:

jobs:
  test:
    name: Run Dotfiles Tests
    runs-on: macos-latest
    
    # Set default shell to zsh to match our target environment
    defaults:
      run:
        shell: zsh {0}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up environment
        run: |
          # Set DOTFILES environment variable for tests
          echo "DOTFILES=${{ github.workspace }}" >> $GITHUB_ENV
          
          # Ensure zsh is configured properly
          echo "Using zsh version: $ZSH_VERSION"
          echo "Shell: $SHELL"
          
          # Make test runner executable
          chmod +x test/run-tests.zsh
          
      - name: Install shellcheck
        run: |
          # Install shellcheck for static analysis
          brew install shellcheck
          
      - name: Run shellcheck
        run: |
          # Run shellcheck on all bash scripts (.sh and .bash files)
          # Configuration is handled by .shellcheckrc file
          echo "Running shellcheck on bash scripts..."
          
          # Find all bash scripts and run shellcheck
          # Exclude experiment directory which contains intentionally bad examples
          BASH_FILES=$(find . \( -name "*.sh" -o -name "*.bash" \) -type f -not -path "./.*" -not -path "./experiment/*")
          
          if [[ -z "$BASH_FILES" ]]; then
            echo "No bash scripts found to check"
            exit 0
          fi
          
          echo "Found bash scripts to check:"
          echo "$BASH_FILES"
          echo ""
          
          # Check each file
          FAILED_FILES=""
          while IFS= read -r file; do
            echo "Checking: $file"
            if ! shellcheck -s bash "$file"; then
              FAILED_FILES="$FAILED_FILES$file\n"
            fi
          done <<< "$BASH_FILES"
          
          if [[ -n "$FAILED_FILES" ]]; then
            echo ""
            echo "‚ùå Shellcheck failed for the following files:"
            echo -e "$FAILED_FILES"
            exit 1
          fi
          
          echo "‚úÖ All bash scripts passed shellcheck"
          
      - name: Install BATS
        run: |
          # Install BATS for running bash tests
          brew install bats-core
          
      - name: Run main test suite
        run: |
          # Run the main test suite using the project's test runner
          echo "Running main test suite..."
          ./test/run-tests.zsh
          echo "‚úÖ Main test suite completed"
          
      - name: Run BATS tests in features and core
        run: |
          # Run BATS tests in the new structure (features/ and core/)
          echo "Running BATS tests in new structure..."
          
          # Run tests in core/ directories (if any exist)
          if [[ -d "core" ]]; then
            CORE_TESTS=$(find core -name "*.bats" -type f)
            if [[ -n "$CORE_TESTS" ]]; then
              echo "Running tests in core/ directories..."
              echo "$CORE_TESTS" | while read -r test_file; do
                echo "Running: $test_file"
                bats "$test_file" || echo "‚ùå Failed: $test_file"
              done
            else
              echo "No BATS tests found in core/ directories"
            fi
          fi
          
          # Run tests in features/ directories
          if [[ -d "features" ]]; then
            FEATURE_TESTS=$(find features -name "*.bats" -type f)
            if [[ -n "$FEATURE_TESTS" ]]; then
              echo "Running tests in features/ directories..."
              echo "$FEATURE_TESTS" | while read -r test_file; do
                echo "Running: $test_file"
                bats "$test_file" || echo "‚ùå Failed: $test_file"
              done
            else
              echo "No BATS tests found in features/ directories"
            fi
          fi
          
          echo "‚úÖ Feature and core BATS tests completed"
          
      - name: Test symlink verification
        run: |
          echo "Testing symlink functionality..."
          
          # Check if symlinks script exists in old location
          if [[ -f "./bin/install/symlinks.bash" ]]; then
            echo "Testing legacy symlinks script..."
            # Test that the script can be sourced without errors
            bash -n ./bin/install/symlinks.bash
            echo "‚úÖ Legacy symlinks script syntax check passed"
          fi
          
          # Check if symlinks utilities exist in new location
          if [[ -f "./core/symlinks/utils.bash" ]]; then
            echo "Testing new symlinks utilities..."
            # Test that the utilities can be sourced without errors
            bash -n ./core/symlinks/utils.bash
            
            # Test basic symlink functionality
            source ./core/symlinks/utils.bash
            echo "‚úÖ New symlinks utilities loaded successfully"
          fi
          
          echo "‚úÖ Symlink verification completed"
          
      - name: Verify BATS test coverage
        run: |
          # Count BATS test files and verify comprehensive coverage
          echo "Verifying BATS test coverage..."
          
          # Count all BATS test files across repository
          TOTAL_BATS=$(find . -name "*.bats" -type f | wc -l | tr -d ' ')
          echo "Total BATS test files found: $TOTAL_BATS"
          
          # Count by directory
          TEST_DIR_BATS=$(find test -name "*.bats" -type f 2>/dev/null | wc -l | tr -d ' ')
          CORE_DIR_BATS=$(find core -name "*.bats" -type f 2>/dev/null | wc -l | tr -d ' ')
          FEATURES_DIR_BATS=$(find features -name "*.bats" -type f 2>/dev/null | wc -l | tr -d ' ')
          
          echo "BATS tests in test/: $TEST_DIR_BATS"
          echo "BATS tests in core/: $CORE_DIR_BATS" 
          echo "BATS tests in features/: $FEATURES_DIR_BATS"
          
          # Verify we found reasonable number of tests
          if [[ $TOTAL_BATS -lt 5 ]]; then
            echo "‚ùå Warning: Only $TOTAL_BATS BATS tests found, expected at least 5"
            exit 1
          fi
          
          # Log test distribution for visibility
          echo "Test distribution:"
          echo "  - Legacy test/: $TEST_DIR_BATS tests"
          echo "  - New core/: $CORE_DIR_BATS tests"
          echo "  - New features/: $FEATURES_DIR_BATS tests"
          
          echo "‚úÖ BATS test coverage verification passed"
          
      - name: Test environment validation
        run: |
          # Validate that our test environment works correctly
          echo "Validating test environment..."
          
          # Check that DOTFILES is set correctly
          if [[ -z "$DOTFILES" ]]; then
            echo "‚ùå DOTFILES environment variable not set"
            exit 1
          fi
          
          echo "‚úÖ DOTFILES set to: $DOTFILES"
          
          # Verify key test directories exist
          if [[ ! -d "$DOTFILES/test" ]]; then
            echo "‚ùå Test directory not found"
            exit 1
          fi
          
          if [[ ! -f "$DOTFILES/test/run-tests.zsh" ]]; then
            echo "‚ùå Test runner not found"
            exit 1
          fi
          
          echo "‚úÖ Test infrastructure validated"
          
      - name: Summary
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Shell: $SHELL"
          echo "ZSH Version: $ZSH_VERSION"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "üéâ All tests passed!"
          else
            echo "‚ùå Some tests failed. Check the logs above for details."
          fi