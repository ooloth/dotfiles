// NOTE: prettier formatting disabled via .prettierignore

{
   // Assign jsonc to prettier to disable this file from autoformatting on save (which makes the Vim/WhichKey settings unreadable)
  "[astro][css][graphql][html][javascript][javascriptreact][jsonc][markdown][toml][typescript][typescriptreact][vue][xml][yaml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[markdown]": {
    "editor.wordWrap": "on"
  },
  "[lua][luau]": {
    "editor.defaultFormatter": "JohnnyMorganz.stylua"
  },
  "[python]": {
    // see: https://github.com/astral-sh/ruff-vscode?tab=readme-ov-file#configuring-vs-code
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.organizeImports": "explicit"
    },
    "editor.defaultFormatter": "charliermarsh.ruff"
  },
  "[terraform][terraform-vars]": {
    "editor.defaultFormatter": "hashicorp.terraform"
  },
  "accessibility.dimUnfocused.enabled": true,
  "accessibility.dimUnfocused.opacity": 0.95,
  "css.lint.unknownAtRules": "ignore",
  "diffEditor.ignoreTrimWhitespace": false,
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.accessibilitySupport": "off",
  "editor.autoClosingDelete": "always",
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "editor.cursorSurroundingLines": 20,
  "editor.foldingImportsByDefault": true,
  "editor.fontFamily": "'UbuntuMono Nerd Font', 'Ubuntu Mono', Menlo, Monaco, 'Courier New', monospace",
  "editor.fontLigatures": true,
  "editor.fontWeight": "normal",
  "editor.formatOnPaste": false,
  "editor.formatOnSave": true,
  "editor.formatOnSaveMode": "file",
  "editor.formatOnType": true,
  "editor.gotoLocation.multipleDeclarations": "goto",
  "editor.gotoLocation.multipleDefinitions": "goto",
  "editor.gotoLocation.multipleImplementations": "goto",
  "editor.gotoLocation.multipleReferences": "goto",
  "editor.gotoLocation.multipleTypeDefinitions": "goto",
  "editor.guides.indentation": false,
  "editor.inlineSuggest.enabled": true,
  "editor.linkedEditing": true,
  "editor.lineHeight": 1.35,
  "editor.lineNumbers": "off",
  "editor.matchBrackets": "near",
  "editor.minimap.enabled": false,
  "editor.quickSuggestions": {
    "strings": true
  },
  "editor.stickyScroll.enabled": true,
  "editor.suggest.preview": true,
  "editor.suggest.showStatusBar": true,
  "editor.tabSize": 2,
  "editor.tokenColorCustomizations": {
    "[Catppuccin Mocha]": {
      // Brighter text
      // see: https://github.com/catppuccin/nvim/blob/main/lua/catppuccin/palettes/mocha.lua
      "comments": "#7f849c"
    },
    "[Material Theme Ocean]": {
      "comments": "#525975"
    }
  },
  "editor.wordWrap": "off",
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
  },
  "emmet.syntaxProfiles": {
    "postcss": "css"
  },
  "errorLens.statusBarMessageEnabled": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "astro", // Enable .astro
    "typescript", // Enable .ts
    "typescriptreact" // Enable .tsx
  ],
  "explorer.confirmDragAndDrop": false,
  "explorer.fileNesting.enabled": false,
  "explorer.decorations.badges": false,
  "git.decorations.enabled": false,
  "explorer.openEditors.visible": 1,
  "files.associations": {
    ".eslintrc": "yaml",
    "*.njk": "nunjucks",
    ".npmrc": "ini",
    "*.plist": "xml",
    ".prettierrc": "yaml",
    ".python-version": "plaintext",
    "*.webc": "html"
  },
  "files.autoSave": "afterDelay",
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "files.simpleDialog.enable": true,
  "files.trimTrailingWhitespace": true,
  "git.autofetch": true,
  "git.autoStash": true,
  "git.suggestSmartCommit": false,
  "git.useEditorAsCommitInput": false,
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": false,
    "yaml": true
  },
  // see: https://github.com/microsoft/vscode-copilot-release/issues/541#issuecomment-1865921869
  "github.copilot.advanced": {
    "debug.useNodeFetcher": true
  },
  "gitlens.codeLens.authors.enabled": false,
  "gitlens.codeLens.enabled": false,
  "gitlens.currentLine.enabled": false,
  "gitlens.graph.statusBar.enabled": false,
  "gitlens.mode.statusBar.enabled": false,
  "go.alternateTools": {
    // see: https://github.com/golang/vscode-go/issues/971#issuecomment-1506756761
    "go": "/opt/homebrew/bin/go"
  },
  // allow installing extensions via the cli
  // see: https://stackoverflow.com/questions/36506539/how-do-i-get-visual-studio-code-to-trust-our-self-signed-proxy-certificate
  "http.proxyStrictSSL": false,
  "javascript.preferences.importModuleSpecifier": "relative",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "markdown.preview.fontSize": 15,
  "markdown.preview.markEditorSelection": false,
  "markdown.preview.typographer": true,
  "markdown.updateLinksOnFileMove.enabled": "prompt",
  "notebook.codeActionsOnSave": {
    "notebook.source.fixAll": "explicit",
    "notebook.source.organizeImports": "explicit"
  },
  "notebook.formatOnSave.enabled": true,
  "notebook.insertFinalNewline": true,
  "notebook.output.scrolling": true,
  "notebook.stickyScroll.enabled": true,
  "npm.enableRunFromFolder": true,

  "prettier.documentSelectors": ["**/*.astro"],
  "prettier.requireConfig": true,
  "print-it.default.template": "console.log(\"{{escaped}}:\", {{raw}})",
  "print-it.html.template": "console.log(\"{{escaped}}:\", {{raw}});",
  "print-it.javascript.template": "console.log(\"{{escaped}}:\", {{raw}})",
  "print-it.javascriptreact.template": "console.log('{{escaped}}:', {{raw}})",
  "print-it.python.template": "print(f\"{{{raw}}=}\")",
  "print-it.rust.template": "println!(\"{{escaped}}: {:?}\", {{raw}});",
  "print-it.shellscript.template": "echo \"{{escaped}}: ${{raw}}\"",
  "print-it.typescript.template": "console.log(\"{{escaped}}:\", {{raw}})",
  "print-it.typescriptreact.template": "console.log(\"{{escaped}}:\", {{raw}})",
  "print-it.vue.template": "console.log(\"{{escaped}}:\", {{raw}})",
  "problems.showCurrentInStatus": true,
  // "python.testing.autoTestDiscoverOnSaveEnabled": false,
  // "python.testing.unittestEnabled": false,

  "redhat.telemetry.enabled": false,
  "references.preferredLocation": "view",
  "scm.inputFontFamily": "editor",
  "scm.inputFontSize": 0,
  "search.exclude": {
    "**/.cache": true,
    "**/.js.map": true,
    "**/bower_components": true,
    "**/dist": true,
    "**/tmp": true,
    "/var/**/*": true
  },
  "search.searchEditor.doubleClickBehaviour": "openLocationToSide",
  "search.smartCase": true,
  "security.workspace.trust.untrustedFiles": "open",
  "settings.cycle": [
    { "id": "lineNumbers", "values": [ { "editor.lineNumbers": "on", "vim.smartRelativeLine": true }, { "editor.lineNumbers": "off", "vim.smartRelativeLine": false } ] },
    { "id": "prettier", "values": [
      { "[astro][css][graphql][html][javascript][javascriptreact][json][jsonc][markdown][toml][typescript][typescriptreact][vue][xml]": { "editor.defaultFormatter": null } },
      { "[astro][css][graphql][html][javascript][javascriptreact][json][jsonc][markdown][toml][typescript][typescriptreact][vue][xml]": { "editor.defaultFormatter": "esbenp.prettier-vscode" } }
    ]},
    { "id": "relativeLineNumbers", "values": [ { "editor.lineNumbers": "relative", "vim.smartRelativeLine": true }, { "editor.lineNumbers": "on", "vim.smartRelativeLine": false } ] }
  ],
  "shellcheck.run": "onSave",
  "terminal.external.osxExec": "kitty.app",
  "terminal.integrated.cursorBlinking": false,
  "terminal.integrated.defaultProfile.osx": "zsh",
  // Allows tasks to find zsh, node, etc.
  "terminal.integrated.automationProfile.osx": {
    "args": ["-l", "-i"],
    "path": "/opt/homebrew/bin/zsh"
  },
  "terminal.integrated.profiles.osx": {
    "bash": null,
    "zsh": { "path": "/opt/homebrew/bin/zsh" }
  },
  "terminal.integrated.lineHeight": 1.35,
  "terminal.integrated.scrollback": 15000,
  "terraform.experimentalFeatures.validateOnSave": true,
  "terraform.languageServer.terraform.path": "/opt/homebrew/bin/terraform",
  "todohighlight.keywords": [
    // see: https://github.com/catppuccin/nvim/blob/main/lua/catppuccin/palettes/mocha.lua
    { "backgroundColor": "transparent", "color": "#f38ba8", "text": "FIXME" },
    { "backgroundColor": "transparent", "color": "#fab387", "text": "WARN" },
    { "backgroundColor": "transparent", "color": "#f9e2af", "text": "TODO" },
    { "backgroundColor": "transparent", "color": "#a6e3a1", "text": "NOTE" }
  ],
  "workbench.tips.enabled": false,
  "totalTypeScript.hiddenTips": [
    "in-operator-narrowing",
    "passing-generics-to-types",
    "pick-utility-type",
    "record-utility-type",
    "keyof",
    "omit-utility-type",
    "tuple-type",
    "typeof",
    "lowercase-utility-type",
    "never-keyword",
    "partial-utility-type",
    "type-predicate",
    "as-const",
    "as-const-on-object",
    "extract-utility-type",
    "non-null-expression",
    "generic-slots-in-functions",
    "mapped-type",
    "returntype-utility-type",
    "type-alias-with-generics",
    "type-alias-with-multiple-generics",
    "conditional-type"
  ],
  "totalTypeScript.hideAllTips": false,
  "totalTypeScript.hideBasicTips": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "vim.changeWordIncludesWhitespace": true,
  "vim.foldfix": true,
  "vim.highlightedyank.color": "#ff966c",
  "vim.highlightedyank.duration": 150,
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.textColor": "#000000",
  "vim.hlsearch": true,
  "vim.insertModeKeyBindingsNonRecursive": [],
  "vim.leader": "",
  "vim.normalModeKeyBindingsNonRecursive": [
    { "before": [ "<esc>" ], "after": [ "<esc>", ":", "n", "o", "h", "<cr>" ] },
    { "before": [ "<space>" ], "commands": [ "whichkey.show" ] },
    { "before": [ "," ], "after": [ ":" ] }, // enter command mode with , instead of :
    { "before": [ ":" ], "after": [ "," ] }, // navigate f and t results using ;/: (like n/N for / results)
    { "before": [ "]", "c" ], "commands": [ "workbench.action.navigateForwardInEditLocations" ] },
    { "before": [ "[", "c" ], "commands": [ "workbench.action.navigateBackInEditLocations" ] },
    { "before": [ "]", "p" ], "commands": [ "editor.action.marker.nextInFiles" ] },
    { "before": [ "[", "p" ], "commands": [ "editor.action.marker.prevInFiles" ] },
    { "before": [ "g", "a" ], "commands": [ "editor.action.quickFix" ] },
    { "before": ["g", "D"] , "commands": [ "editor.action.revealDefinitionAside" ], "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" },
    { "before": [ "H" ], "after": [ "^" ] }, // go to first character in line
    { "before": [ "L" ], "after": [ "$" ] }, // go to last character in line
    // { "before": ["n"], "commands": [ "search.action.focusNextSearchResult" ], "when": "inSearchEditor && hasSearchResult" },
    // { "before": ["N"], "commands": [ "search.action.focusPreviousSearchResult" ], "when": "inSearchEditor && hasSearchResult" },
    { "before": [ "u" ], "commands": [ "undo" ] },
    { "before": [ "Y" ], "after": [ "y", "$" ] },
    { "before": [ "Z", "Z" ], "commands": [ ":wq" ] },
    // { "before": [ "^" ], "after": [ "<noop>" ] }, // practice using H instead
    { "before": [ "$" ], "after": [ "<noop>" ] } // practice using L instead
  ],
  "vim.searchHighlightColor": "#FFCB6B",
  "vim.searchHighlightTextColor": "black",
  "vim.showmodename": false,
  "vim.smartRelativeLine": false,
  "vim.surround": true,
  "vim.useSystemClipboard": true,
  "vim.visualModeKeyBindingsNonRecursive": [
    { "before": [ "<space>" ], "commands": [ "whichkey.show" ] },
    { "before": [ "," ], "after": [ ":" ] }, // enter command mode with , instead of :
    { "before": [ ":" ], "after": [ "," ] }, // navigate f and t results using ;/: (like n/N for / results)
    { "before": [ "]", "p" ], "commands": [ "editor.action.marker.nextInFiles" ] },
    { "before": [ "[", "p" ], "commands": [ "editor.action.marker.prevInFiles" ] },
    // { "before": ["n"], "commands": [ "search.action.focusNextSearchResult" ], "when": "inSearchEditor && hasSearchResult" },
    // { "before": ["N"], "commands": [ "search.action.focusPreviousSearchResult" ], "when": "inSearchEditor && hasSearchResult" },
    { "before": [ "u" ], "commands": [ "undo" ] },
    { "before": [ "v" ], "commands": [ "editor.action.smartSelect.grow" ] },
    { "before": [ "<s-v>" ], "commands": [ "editor.action.smartSelect.shrink" ] },
    { "before": [ "H" ], "after": [ "^" ] }, // go to first character in line
    { "before": [ "L" ], "after": [ "$" ] }, // go to last character in line
    { "before": [ "Z", "Z" ], "commands": [ ":wq" ] },
    // { "before": [ "^" ], "after": [ "<noop>" ] }, // practice using H instead
    { "before": [ "$" ], "after": [ "<noop>" ] } // practice using L instead
  ],
  "whichkey.bindings": [
    // see: https://vspacecode.github.io/docs/whichkey/reference

    { "key": " ", "name": "Commands", "command": "workbench.action.showCommands", "type": "command" },
    { "key": "?", "name": "Search keybindings", "command": "whichkey.searchBindings", "type": "command" },
    { "key": "\\", "name": "Split editor right", "command": "workbench.action.splitEditorToRightGroup", "type": "command" },
    { "key": ".", "name": "Repeat last command", "command": "whichkey.repeatMostRecent", "type": "command" },

    { "key": "a", "name": "+AI", "type": "bindings", "bindings": [
      { "key": "a", "name": "Open chat session in sidebar", "command": "workbench.action.chat.open", "type": "command" },
      { "key": "e", "name": "Open chat session in editor", "command": "workbench.action.chat.openInEditor", "type": "command" },
      { "key": "h", "name": "Search chat history", "commands": ["workbench.action.chat.open", "workbench.action.chat.copilot.history"], "type": "commands" },
      { "key": "i", "name": "Chat inline", "command": "inlineChat.start", "type": "command" },
      { "key": "q", "name": "Quick chat", "command": "workbench.action.quickchat.toggle", "type": "command" },
      { "key": "s", "name": "Open chat session in sidebar", "command": "workbench.action.chat.open", "type": "command" },
      // NOTE: use c-v to start/continue a voice chat while cursor is in an input field
      { "key": "v", "name": "Start chat session with voice", "command": "workbench.action.chat.startVoiceChat", "when": "!voiceChatInProgress", "type": "command" },
      { "key": "x", "name": "Export chat session as JSON", "command": "workbench.action.chat.export", "type": "command" }
    ]},

    { "key": "b", "name": "Toggle sidebar", "command": "workbench.action.toggleSidebarVisibility", "type": "command" },

    { "key": "d", "name": "+Debugger", "type": "bindings", "bindings": [
      { "key": "[", "name": "Prev REPL/console", "command": "workbench.action.debug.prevConsole", "type": "command" },
      { "key": "]", "name": "Next REPL/console", "command": "workbench.action.debug.nextConsole", "type": "command" },
      { "key": "a", "name": "Activate all breakpoints (toggle)", "command": "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction", "type": "command" },
      { "key": "b", "name": "Add/remove breakpoint (toggle)", "command": "editor.debug.action.toggleBreakpoint", "type": "command" },
      { "key": "B", "name": "Add conditional breakpoint", "command": "editor.debug.action.conditionalBreakpoint", "type": "command" },
      { "key": "c", "name": "Continue", "command": "workbench.action.debug.continue", "type": "command" },
      { "key": "d", "name": "Start/Restart", "command": "workbench.action.debug.restart", "type": "command" },
      { "key": "D", "name": "Run without debugging", "command": "workbench.action.debug.run", "type": "command" },
      { "key": "h", "name": "Show hover", "command": "editor.debug.action.showDebugHover", "type": "command" },
      { "key": "j", "name": "Jump to cursor", "command": "debug.jumpToCursor", "type": "command" },
      { "key": "i", "name": "Step into", "command": "workbench.action.debug.stepInto", "type": "command" },
      { "key": "o", "name": "Step out", "command": "workbench.action.debug.stepOut", "type": "command" },
      { "key": "p", "name": "Pause", "command": "workbench.action.debug.pause", "type": "command" },
      { "key": "r", "name": "Focus REPL/console", "command": "workbench.debug.action.toggleRepl", "type": "command" },
      { "key": "R", "name": "Inspect in REPL", "command": "editor.debug.action.selectionToRepl", "type": "command" },
      { "key": "s", "name": "Step over", "command": "workbench.action.debug.stepOver", "type": "command" },
      { "key": "S", "name": "Stop", "command": "workbench.action.debug.stop", "type": "command" },
      { "key": "w", "name": "Focus watch window", "command": "workbench.debug.action.focusWatchView", "type": "command" },
      { "key": "W", "name": "Add to watch", "command": "editor.debug.action.selectionToWatch", "type": "command" },
      { "key": "x", "name": "Clear REPL", "command": "workbench.debug.panel.action.clearReplAction", "type": "command" },
      { "key": "X", "name": "Remove all breakpoints", "command": "workbench.debug.viewlet.action.removeAllBreakpoints", "type": "command" }
    ]},

    { "key": "e", "name": "+Editor", "type": "bindings", "bindings": [
      { "key": "\\", "name": "Split editor right", "command": "workbench.action.splitEditorToRightGroup", "type": "command" },
      { "key": "-", "name": "Split editor below", "command": "workbench.action.splitEditorToBelowGroup", "type": "command" },
      { "key": "=", "name": "Reset editor group sizes", "command": "workbench.action.evenEditorWidths", "type": "command" },
      { "key": "d", "name": "Close active editor", "command": "workbench.action.closeActiveEditor", "type": "command" },
      { "key": "D", "name": "Close editor group", "command": "workbench.action.closeEditorsInGroup", "type": "command" },
      { "key": "e", "name": "View open editors", "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor", "type": "command" },
      { "key": "h", "name": "Move editor into left group", "command": "workbench.action.moveEditorToLeftGroup", "type": "command" },
      { "key": "g", "name": "Change editor language mode", "command": "workbench.action.editor.changeLanguageMode", "type": "command" },
      { "key": "j", "name": "Move editor into below group", "command": "workbench.action.moveEditorToBelowGroup", "type": "command" },
      { "key": "k", "name": "Move editor into above group", "command": "workbench.action.moveEditorToAboveGroup", "type": "command" },
      { "key": "l", "name": "Move editor into right group", "command": "workbench.action.moveEditorToRightGroup", "type": "command" },
      { "key": "H", "name": "Move editor group left", "command": "workbench.action.moveActiveEditorGroupLeft", "type": "command" },
      { "key": "J", "name": "Move editor group down", "command": "workbench.action.moveActiveEditorGroupDown", "type": "command" },
      { "key": "K", "name": "Move editor group up", "command": "workbench.action.moveActiveEditorGroupUp", "type": "command" },
      { "key": "L", "name": "Move editor group right", "command": "workbench.action.moveActiveEditorGroupRight", "type": "command" },
      { "key": "m", "name": "Maximize editor group (toggle)", "command": "workbench.action.toggleMaximizeEditorGroup", "type": "command" },
      { "key": "M", "name": "Merge all editor groups", "command": "workbench.action.joinAllGroups", "type": "command" },
      { "key": "n", "name": "New untitled editor", "command": "workbench.action.files.newUntitledFile", "type": "command" },
      { "key": "o", "name": "Only this editor (close others)", "commands": ["workbench.action.closeOtherEditors", "workbench.action.closeEditorsInOtherGroups"], "type": "command" },
      { "key": "p", "name": "Pin editor", "command": "workbench.action.pinEditor", "type": "command" },
      { "key": "u", "name": "Undo close editor", "command": "workbench.action.reopenClosedEditor", "type": "command" },
      { "key": "x", "name": "Close all editor groups", "command": "workbench.action.closeAllGroups", "type": "command" },
      { "key": "y", "name": "Copy editor contents to clipboard", "commands": [ "editor.action.selectAll", "editor.action.clipboardCopyAction", "cancelSelection" ], "type": "commands" }
    ]},

    { "key": "f", "name": "+File", "type": "bindings", "bindings": [
      { "key": "c", "name": "Compare with...", "command": "workbench.files.action.compareFileWith", "type": "command" },
      { "key": "d", "name": "Duplicate", "command": "fileutils.duplicateFile", "type": "command" },
      { "key": "D", "name": "Delete", "command": "fileutils.removeFile", "type": "command" },
      { "key": "e", "name": "Explore file tree", "command": "workbench.view.explorer", "type": "command" },
      { "key": "f", "name": "Find", "command": "workbench.action.quickOpen", "type": "command" },
      { "key": "m", "name": "Move", "command": "fileutils.moveFile", "type": "command" },
      { "key": "n", "name": "New", "command": "extension.advancedNewFile", "type": "command" },
      { "key": "N", "name": "New untitled", "command": "workbench.action.files.newUntitledFile", "type": "command" },
      { "key": "o", "name": "Open", "command": "whichkey.openFile", "type": "command" },
      { "key": "r", "name": "Rename file", "command": "fileutils.renameFile", "type": "command" },
      { "key": "s", "name": "Save", "command": "workbench.action.files.save", "type": "command" },
      { "key": "S", "name": "Save all", "command": "workbench.action.files.saveAll", "type": "command" },
      { "key": "w", "name": "Open in new window", "command": "workbench.action.files.showOpenedFileInNewWindow", "type": "command" },
      { "key": "y", "name": "Copy name", "command": "fileutils.copyFileName", "type": "command" },
      { "key": "Y", "name": "Copy relative path", "command": "copyRelativeFilePath", "type": "command" }
    ]},

    { "key": "g", "name": "+Git", "type": "bindings", "bindings": [
      { "key": "b", "name": "Checkout", "command": "git.checkout", "type": "command" },
      { "key": "c", "name": "Commit", "command": "git.commit", "type": "command" },
      { "key": "f", "name": "Fetch", "command": "git.fetch", "type": "command" },
      { "key": "h", "name": "History (of file)", "command": "gitlens.showFileHistoryView", "type": "command" },
      { "key": "l", "name": "Log (search commits)", "command": "gitlens.showCommitSearch", "type": "command" },
      { "key": "m", "name": "Merge branch", "command": "git.merge", "type": "command" },
      { "key": "p", "name": "Pull", "command": "git.push", "type": "command" },
      { "key": "P", "name": "Push", "command": "git.push", "type": "command" },
      { "key": "r", "name": "+Resolve merge conflict", "type": "bindings", "bindings": [
        { "key": "b", "name": "Accept both", "command": "merge-conflict.accept.both", "type": "command" },
        { "key": "B", "name": "Accept all both", "command": "merge-conflict.accept.all-both", "type": "command" },
        { "key": "c", "name": "Accept current", "command": "merge-conflict.accept.current", "type": "command" },
        { "key": "C", "name": "Accept all current", "command": "merge-conflict.accept.all-current", "type": "command" },
        { "key": "i", "name": "Accept incoming", "command": "merge-conflict.accept.incoming", "type": "command" },
        { "key": "I", "name": "Accept all incoming", "command": "merge-conflict.accept.all-incoming", "type": "command" },
        { "key": "s", "name": "Accept selection", "command": "merge-conflict.accept.selection", "type": "command" },
        { "key": "k", "name": "Compare current conflict", "command": "merge-conflict.compare", "type": "command" },
        { "key": "n", "name": "Next Conflict", "command": "merge-conflict.next", "type": "command" },
        { "key": "p", "name": "Previous Conflict", "command": "merge-conflict.previous", "type": "command" }
      ]},
      { "key": "s", "name": "Status", "command": "workbench.view.scm", "type": "command" },
      { "key": "S", "name": "Stage", "command": "git.stage", "type": "command" },
      { "key": "U", "name": "Unstage", "command": "git.unstage", "type": "command" },
      { "key": "x", "name": "Delete Branch", "command": "git.deleteBranch", "type": "command" },
      { "key": "y", "name": "Copy GitHub permalink", "command": "issue.copyGithubPermalink", "type": "command" },
      { "key": "Y", "name": "Open GitHub permalink", "command": "issue.openGithubPermalink", "type": "command" }
    ]},

    { "key": "l", "name": "Log to console", "command": "console.log.wrap.nameValue", "type": "command" },

    { "key": "n", "name": "+Notebook/Jupyter", "type": "bindings", "bindings": [
      { "key": "y", "name": "Copy cell", "command": "notebook.cell.copy", "type": "command" },
      { "key": "Y", "name": "Copy cell output", "command": "notebook.cellOutput.copy", "type": "command" }
    ]},

    { "key": "o", "name": "+Open", "type": "bindings", "bindings": [
      { "key": "b", "name": "Sidebar (toggle)", "command": "workbench.action.toggleSidebarVisibility", "type": "command" },
      { "key": "e", "name": "Explorer", "command": "workbench.view.explorer", "type": "command" },
      { "key": "E", "name": "Explorer (remote)", "command": "workbench.view.remote", "type": "command" },
      { "key": "g", "name": "Git (source control)", "command": "workbench.view.scm", "type": "command" },
      { "key": "o", "name": "Output", "command": "workbench.action.output.toggleOutput", "type": "command" },
      { "key": "p", "name": "Problems", "command": "workbench.actions.view.problems", "type": "command" },
      { "key": "P", "name": "Panel (toggle)", "command": "workbench.action.togglePanel", "type": "command" },
      { "key": "t", "name": "Test Explorer", "command": "workbench.view.testing.focus", "type": "command" },
      { "key": "x", "name": "Extensions", "command": "workbench.view.extensions", "type": "command" }
    ]},

    { "key": "p", "name": "+Problems", "type": "bindings", "bindings": [
      { "key": "a", "name": "All", "command": "workbench.actions.view.problems", "type": "command" },
      { "key": "n", "name": "Next", "command": "editor.action.marker.nextInFiles", "type": "command" },
      { "key": "p", "name": "Previous", "command": "editor.action.marker.prevInFiles", "type": "command" },
      { "key": "r", "name": "Find rule definition", "command": "errorLens.findLinterRuleDefinition", "type": "command" },
      { "key": "y", "name": "Copy problem message", "command": "errorLens.copyProblemMessage", "type": "command" },
      { "key": "Y", "name": "Copy problem code", "command": "errorLens.copyProblemCode", "type": "command" }
    ]},

    { "key": "r", "name": "+Refactor", "type": "bindings", "bindings": [
      { "key": ".", "name": "Quick fix", "command": "editor.action.quickFix", "type": "command" },
      { "key": "r", "name": "Refactor", "command": "editor.action.refactor", "type": "command" },
      { "key": "s", "name": "Rename symbol", "command": "editor.action.rename", "type": "command" },
      { "key": "u", "name": "To lower case", "command": "editor.action.transformToLowercase", "type": "command" },
      { "key": "U", "name": "To upper case", "command": "editor.action.transformToUppercase", "type": "command" }
    ]},

    { "key": "s", "name": "+Search", "type": "bindings", "bindings": [
      { "key": "c", "name": "Search incoming calls", "command": "references-view.showIncomingCalls", "type": "command" },
      { "key": "e", "name": "Search in editor", "command": "actions.find", "type": "command" },
      { "key": "E", "name": "Search and replace in editor", "command": "editor.action.startFindReplaceAction", "type": "command" },
      { "key": "f", "name": "Search for a file", "command": "workbench.action.quickOpen", "type": "command" },
      { "key": "k", "name": "Search keyboard shortcuts", "command": "workbench.action.openGlobalKeybindings", "type": "command" },
      // { "key": "p", "name": "Search in project", "command": "search.action.openNewEditor", "type": "command" },
      { "key": "p", "name": "Search in project", "command": "workbench.action.findInFiles", "type": "command" },
      { "key": "P", "name": "Search and replace in project", "command": "workbench.action.replaceInFiles", "type": "command" },
      { "key": "r", "name": "Search recent projects", "command": "workbench.action.openRecent", "type": "command" },
      { "key": "R", "name": "Search references", "command": "references-view.find", "type": "command" },
      { "key": "s", "name": "Search symbols in editor", "command": "workbench.action.gotoSymbol", "type": "command" },
      { "key": "S", "name": "Search symbols in project", "command": "workbench.action.showAllSymbols", "type": "command" }
    ]},

     { "key": "t", "name": "+Tests", "type": "bindings", "bindings": [
      { "key": "a", "name": "Run all", "command": "testing.runAll", "type": "command" },
      { "key": "c", "name": "Run test at cursor", "command": "testing.runAtCursor", "type": "command" },
      { "key": "d", "name": "Debug test in current file", "command": "testing.debugCurrentFile", "type": "command" },
      { "key": "e", "name": "Open Test Explorer", "command": "workbench.view.testing.focus", "type": "command" },
      { "key": "o", "name": "Peek at test output", "command": "testing.openOutputPeek", "type": "command" },
      { "key": "r", "name": "Refresh tests", "command": "testing.refreshTests", "type": "command" },
      { "key": "t", "name": "Run tests in current file", "command": "testing.runCurrentFile", "type": "command" }
    ]},

    //  { "key": "t", "name": "+Terminal", "type": "bindings", "bindings": [
    //   // NOTE: can also use ctrl+[] to navigate terminal groups more quickly
    //   { "key": "[", "name": "Focus prev group", "command": "workbench.action.terminal.focusPrevious", "type": "command" },
    //   { "key": "]", "name": "Focus prev group", "command": "workbench.action.terminal.focusNext", "type": "command" },
    //   { "key": "e", "name": "New terminal in editor", "command": "workbench.action.createTerminalEditor", "type": "command" },
    //   { "key": "m", "name": "Toggle maximized panel", "command": "workbench.action.toggleMaximizedPanel", "type": "command" },
    //   { "key": "n", "name": "New terminal", "command": "workbench.action.terminal.new", "type": "command" },
    //   { "key": "t", "name": "Toggle terminal", "command": "workbench.action.terminal.toggleTerminal", "type": "command" },
    //   { "key": "y", "name": "Copy output of last command", "command": "workbench.action.terminal.copyLastCommandOutput", "type": "command" },
    //   { "key": "Y", "name": "Copy last command and output", "command": "workbench.action.terminal.copyLastCommandAndLastCommandOutput", "type": "command" }
    // ]},

    { "key": "u", "name": "+UI", "type": "bindings", "bindings": [
      { "key": "a", "name": "Toggle activity bar", "command": "workbench.action.toggleActivityBarVisibility", "type": "command" },
      { "key": "c", "name": "Color themes", "command": "workbench.action.selectTheme", "type": "command" },
      { "key": "f", "name": "Toggle full screen", "command": "workbench.action.toggleFullScreen", "type": "command" },
      { "key": "n", "name": "Toggle line numbers", "command": "settings.cycle.lineNumbers", "type": "command" },
      { "key": "p", "name": "Toggle maximized panel", "command": "workbench.action.toggleMaximizedPanel", "type": "command" },
      { "key": "P", "name": "Toggle prettier", "command": "settings.cycle.prettier", "type": "command" }, // TODO: move somewhere more thematic
      { "key": "r", "name": "Toggle relative line numbers", "command": "settings.cycle.relativeLineNumbers", "type": "command" },
      { "key": "s", "name": "Toggle statusbar", "command": "workbench.action.toggleStatusbarVisibility", "type": "command" },
      { "key": "w", "name": "Toggle word wrapping", "command": "editor.action.toggleWordWrap", "type": "command" },
      { "key": "z", "name": "Toggle zen mode", "command": "workbench.action.toggleZenMode", "type": "command" }
    ]}
  ],
  "window.commandCenter": false,
  "window.newWindowDimensions": "inherit",
  "custom-ui-style.font.sansSerif": "Ubuntu Mono",
  "breadcrumbs.enabled": false,
  "workbench.colorCustomizations": {
    "[Aura Dracula Spirit (Soft)]": {
      "editorSuggestWidget.selectedBackground": "#3A334B",
      "sideBar.background": "#191521",
      "titleBar.activeBackground": "#191521",
      "titleBar.inactiveBackground": "#191521"
    },
    "[Catppuccin Mocha]": {
      // Brighter text
      "debugTokenExpression.value": "#9399b2",
      "terminal.ansiBlack": "#000000",
      "terminal.ansiBrightBlack": "#000000",

      // Darker backgrounds
      // see: https://github.com/catppuccin/nvim/blob/main/lua/catppuccin/palettes/mocha.lua
      // see: https://github.com/catppuccin/vscode/blob/main/packages/catppuccin-vsc/src/theme/uiColors.ts
      "activityBar.background": "#1A1A28",
      "breadcrumb.background": "#1A1A28",
      "debugExceptionWidget.background": "#1A1A28",
      "dropdown.background": "#1A1A28",
      "editor.background": "#1A1A28",
      "editorGroupHeader.tabsBackground": "#1A1A28",
      "editorMarkerNavigation.background": "#1A1A28",
      "editorMarkerNavigationError.background": "#1A1A28",
      "editorMarkerNavigationInfo.background": "#1A1A28",
      "editorMarkerNavigationWarning.background": "#1A1A28",
      "editorOverviewRuler.background":"#ffffff00",
      "editorOverviewRuler.border":"#ffffff00",
      "editorWidget.background": "#1A1A28",
      "editorGutter.background": "#1A1A28",
      "input.background": "#1A1A28",
      "list.focusBackground": "#1A1A28",
      "list.hoverBackground": "#1A1A28",
      "list.inactiveSelectionBackground": "#1A1A28",
      "notificationCenterHeader.background": "#1A1A28",
      "notifications.background": "#1A1A28",
      "notifications.border": "#1A1A28",
      "peekViewEditor.background": "#1A1A28",
      "peekViewResult.background": "#1A1A28",
      "peekViewTitle.background": "#1A1A28",
      "pickerGroup.border": "#1A1A28",
      "pickerGroup.foreground": "#1A1A28",
      "panel.background": "#1A1A28",
      "sideBar.background": "#1A1A28",
      "sideBarSectionHeader.background": "#1A1A28",
      "sideBarSectionHeader.border": "#45475a",
      "statusBar.background": "#1A1A28",
      "tab.activeBackground": "#1A1A28",
      "tab.hoverBackground": "#1e1e2e",
      "tab.inactiveBackground": "#1A1A28",
      "tab.lastPinnedBorder": "#00000000",
      "tab.unfocusedInactiveBackground": "#1A1A28",
      "terminal.background": "#1A1A28",
      "titleBar.activeBackground": "#1A1A28",
      "titleBar.inactiveBackground": "#1A1A28",
      "walkThrough.embeddedEditorBackground": "#1A1A28",
      "welcomePage.background": "#ff0000" // FIXME: doesn't work
    },
    "[Dracula]": {
      // See: https://github.com/dracula/visual-studio-code/blob/master/src/dracula.yml
      "activityBar.background": "#21222C",
      "editorGroupHeader.tabsBackground": "#21222C",
      "statusBar.background": "#21222C"
    },
    "[Material Theme Ocean]": {
      // see: https://github.com/material-theme/vsc-material-theme/blob/main/scripts/generator/settings/specific/ocean.ts
      "editor.findMatchHighlightBackground": "#292D3E99", // higher contrast
      "editor.lineHighlightBackground": "#1A1C25", // higher constrast
      "editor.rangeHighlightBackground": "#292D3E99", // higher contrast
      "editorSuggestWidget.selectedBackground": "#292D3E", // higher contrast
      "searchEditor.findMatchBackground": "#292D3E", // higher contrast
      "sideBar.foreground": "#babed8" // higher contrast
    },
    "[Nord]": {
      // Brighter text
      // see: https://www.nordtheme.com/docs/colors-and-palettes
      "debugTokenExpression.value": "#7b88a1",
      "statusBar.debuggingForeground": "#eceff4",

      // Darker backgrounds
      // see: https://github.com/orgs/nordtheme/discussions/232
      // see: https://github.com/nordtheme/vim/commit/8494bd9006373876830bfca27f24182098aabc73
      "activityBar.background": "#232730",
      "breadcrumb.background": "#232730",
      "debugExceptionWidget.background": "#232730",
      "dropdown.background": "#232730",
      "editor.background": "#232730",
      "editorMarkerNavigation.background": "#232730",
      "editorMarkerNavigationError.background": "#232730",
      "editorMarkerNavigationInfo.background": "#232730",
      "editorMarkerNavigationWarning.background": "#232730",
      "editorOverviewRuler.background":"#ffffff00",
      "editorOverviewRuler.border":"#ffffff00",
      "editorWidget.background": "#232730",
      "editorGutter.background": "#232730",
      "input.background": "#232730",
      "list.activeSelectionBackground": "#232730",
      "list.focusBackground": "#232730",
      "list.hoverBackground": "#232730",
      "list.inactiveSelectionBackground": "#232730",
      "notificationCenterHeader.background": "#232730",
      "notifications.background": "#232730",
      "notifications.border": "#232730",
      "peekViewEditor.background": "#232730",
      "peekViewResult.background": "#232730",
      "peekViewTitle.background": "#232730",
      "pickerGroup.border": "#232730",
      "pickerGroup.foreground": "#232730",
      "panel.background": "#232730",
      "sideBar.background": "#232730",
      "sideBarSectionHeader.background": "#232730",
      "sideBarSectionHeader.border": "#2E3440",
      "statusBar.background": "#232730",
      "tab.activeBackground": "#232730",
      "tab.hoverBackground": "#1e1e2e",
      "tab.inactiveBackground": "#232730",
      "tab.lastPinnedBorder": "#00000000",
      "terminal.background": "#232730",
      "titleBar.activeBackground": "#232730",
      "walkThrough.embeddedEditorBackground": "#232730"
    }
  },
  "workbench.colorTheme": "Aura Dracula Spirit (Soft)",
  "workbench.editor.revealIfOpen": true,
  "workbench.editor.tabSizing": "shrink",
  "workbench.editor.wrapTabs": true,
  "workbench.fontAliasing": "auto",
  "workbench.layoutControl.enabled": false,
  "workbench.panel.opensMaximized": "preserve",
  "workbench.preferredDarkColorTheme": "Catppuccin Mocha",
  "workbench.tree.indent": 14,
  "zenMode.centerLayout": false,
  "zenMode.fullScreen": false,
  "zenMode.hideStatusBar": true,
  "github.copilot.chat.localeOverride": "en",
  "workbench.sideBar.location": "right",
  "files.autoSaveDelay": 3000,
  "diffEditor.experimental.showMoves": true,
  "multiDiffEditor.experimental.enabled": true,
  "workbench.tree.enableStickyScroll": true,
  "catppuccin.workbenchMode": "minimal",
  "window.zoomPerWindow": false,
  "files.autoSaveWhenNoErrors": true,
  "githubPullRequests.focusedMode": "multiDiff",
  "yaml.format.enable": false,
  "gitlens.graph.minimap.enabled": false,
  "editor.scrollbar.vertical": "hidden",
  "editor.overviewRulerBorder": false,
  "window.density.editorTabHeight": "compact",
  "explorer.compactFolders": false,
  "window.title": "${activeEditorMedium} • ${activeRepositoryName}/${activeRepositoryBranchName}",
  "editor.scrollbar.horizontal": "hidden",
  "catppuccin.bracketMode": "monochromatic",
  "workbench.editor.editorActionsLocation": "hidden",
  // avoid autoformatting in projects with no explicit .prettierrc (i.e. don't fall back to .editorconfig)
  "prettier.useEditorConfig": false,
  "debug.hideLauncherWhileDebugging": true,
  "debug.console.fontSize": 12.5,
  "python.analysis.inlayHints.callArgumentNames": "partial",
  "Lua.hint.enable": true,
  "python.analysis.inlayHints.functionReturnTypes": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "vs-kubernetes": {
    "vs-kubernetes.crd-code-completion": "disabled"
  },
  "terminal.integrated.enableImages": true,
  "terminal.integrated.persistentSessionReviveProcess": "onExitAndWindowClose",
  "python.analysis.addImport.heuristics": true,
  "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
  "gitlens.codeLens.recentChange.enabled": false,

  "catppuccin.italicKeywords": false,

  "editor.lightbulb.enabled": "off",

  "errorLens.codeLensEnabled": false,
  "errorLens.codeLensTemplate": "$severity [$source] $message",
  "errorLens.gutterIconSet": "emoji",
  "errorLens.messageEnabled": true,
  "errorLens.messageTemplate": "$message [$source]",
  "errorLens.severityText": ["⛔", "🚧", "💡", "🍏"],
  "errorLens.statusBarMessageTemplate": "[$source] $message",

  "Lua.format.enable": false,
  "Lua.hint.arrayIndex": "Disable",

  "rust-analyzer.lens.enable": false,

  "security.promptForLocalFileProtocolHandling": false,

  "tailwindCSS.emmetCompletions": true,
  "terminal.integrated.initialHint": false,
  "terminal.integrated.shellIntegration.enabled": false,

  "vscode-kubernetes.log-viewer.follow": true,
  "vscode-kubernetes.log-viewer.timestamp": true,
  "vscode-kubernetes.log-viewer.since": -1,
  "vscode-kubernetes.log-viewer.tail": -1,
  "vscode-kubernetes.log-viewer.destination": "Webview",
  "vscode-kubernetes.log-viewer.wrap": false,

  "workbench.editor.empty.hint": "hidden",
  "workbench.iconTheme": "bearded-icons",
  "workbench.startupEditor": "none",
  "workbench.activityBar.location": "hidden",
  "database-client.autoSync": true,
  "markdown.preview.doubleClickToSwitchToEditor": false,
  "terminal.integrated.inheritEnv": false,
  "workbench.editorAssociations": {
    "*.copilotmd": "vscode.markdown.preview.editor",
    "file:/**/*.parquet": "jupyter-data-wrangler"
  },
  "window.zoomLevel": 2,
  "interactiveWindow.executeWithShiftEnter": true,
  "remote.downloadExtensionsLocally": true
  "interactiveWindow.executeWithShiftEnter": true,
  "workbench.statusBar.visible": false,
  "workbench.editor.showTabs": "none",
  "workbench.editor.enablePreviewFromQuickOpen": true,
  "workbench.editor.enablePreviewFromCodeNavigation": true,
  "terminal.integrated.fontLigatures.enabled": true,
  "catppuccin-icons.hidesExplorerArrows": true,
  "workbench.tree.renderIndentGuides": "none",
  "workbench.panel.showLabels": false,
  "window.confirmSaveUntitledWorkspace": false,
  "workbench.navigationControl.enabled": false,
  "chat.commandCenter.enabled": false,
  "inlineChat.enableV2": true,
  "editor.codeLens": false,
  "editor.snippetSuggestions": "top",
  "window.zoomLevel": 1,
  "editor.fontSize": 12.5,
  "terminal.integrated.fontSize": 12.5,
  "editor.inlayHints.enabled": "offUnlessPressed",
  "workbench.commandPalette.experimental.enableNaturalLanguageSearch": false,
  "workbench.commandPalette.experimental.suggestCommands": true,
  "workbench.commandPalette.preserveInput": true
}
